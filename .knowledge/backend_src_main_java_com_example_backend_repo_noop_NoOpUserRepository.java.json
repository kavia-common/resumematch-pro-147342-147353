{"is_source_file": true, "format": "Java", "description": "This file implements a no-operation (mock) version of the UserRepository for the 'no-mongo' profile, simulating data access for testing or profiles without a real database. It provides in-memory storage and basic CRUD operations for User entities without persistent storage.", "external_files": ["com.example.backend.model.User", "com.example.backend.repo.UserRepository", "org.springframework.context.annotation.Profile", "org.springframework.data.domain.Example", "org.springframework.data.domain.Page", "org.springframework.data.domain.Pageable", "org.springframework.data.domain.Sort", "org.springframework.data.repository.query.FluentQuery.FetchableFluentQuery", "org.springframework.stereotype.Repository"], "external_methods": ["UUID.randomUUID", "users.put", "users.get", "users.containsKey", "users.values", "findById", "Optional.ofNullable", "Optional.isPresent", "Optional.orElse", "ArrayList", "Collections.emptyList", "Collections.emptyMap", "Map.remove", "Map.values", "List.add", "List.stream", "Stream.filter", "Stream.findFirst", "String.equalsIgnoreCase", "Iterable.forEach"], "published": ["save", "saveAll", "insert", "findById", "existsById", "findAll", "count", "deleteById", "delete", "deleteAll", "deleteAllById", "deleteAll", "findAllById", "findOne", "findAll (with Example)", "findAll (with Example and Sort)", "findAll (with Example and Pageable)", "count (with Example)", "exists (with Example)", "findBy"], "classes": [{"name": "NoOpUserRepository", "description": "A mock implementation of UserRepository that stores User entities in memory for the 'no-mongo' Spring profile, providing basic CRUD functionalities without persistence."}], "methods": [{"name": "save", "description": "Stores the given User entity in the in-memory map, assigning a UUID if the ID is null."}, {"name": "saveAll", "description": "Saves multiple User entities, storing each in the in-memory map."}, {"name": "insert", "description": "Alias for save; inserts a User entity."}, {"name": "insert (Iterable)", "description": "Alias for saveAll; inserts multiple User entities."}, {"name": "findById", "description": "Retrieves a User by ID, wrapping in Optional."}, {"name": "existsById", "description": "Checks if a User exists with the given ID."}, {"name": "findAll", "description": "Returns all stored User entities as a list."}, {"name": "findAll (Sort)", "description": "Returns all users. No sorting supported in this implementation."}, {"name": "findAll (Pageable)", "description": "Pagination not supported; throws UnsupportedOperationException."}, {"name": "count", "description": "Returns the number of stored User entities."}, {"name": "deleteById", "description": "Removes the User with the specified ID."}, {"name": "delete", "description": "Removes the specified User entity."}, {"name": "deleteAll", "description": "Removes all User entities."}, {"name": "deleteAllById", "description": "Removes all Users with IDs from the provided iterable."}, {"name": "deleteAll (Iterable)", "description": "Removes a collection of User entities."}, {"name": "findAllById", "description": "Finds all Users with IDs in the provided iterable."}, {"name": "findOne", "description": "Always returns empty, as example matching is not supported."}, {"name": "findAll (with Example)", "description": "Returns empty list; example matching is not supported."}, {"name": "findAll (with Example and Sort)", "description": "Returns empty list; example matching and sorting are not supported."}, {"name": "findAll (with Example and Pageable)", "description": "Pagination and example matching not supported; throws exception."}, {"name": "count (with Example)", "description": "Returns 0; example matching not supported."}, {"name": "exists (with Example)", "description": "Returns false; example matching not supported."}, {"name": "findBy (with Example and Function)", "description": "Returns null; advanced querying not supported."}, {"name": "findByEmail", "description": "Finds User by email address, case-insensitive."}], "search-terms": ["NoOpUserRepository", "no-mongo profile", "in-memory User repository", "mock repository", "User CRUD stub", "profile annotation", "Simulated persistence", "UUID assignment", "No-operation repository", "Spring Data Pageable"], "state": 2, "file_id": 42, "knowledge_revision": 113, "git_revision": "9e506be03d48949a6a169008b48b88bc5388fcd8", "revision_history": [{"108": ""}, {"109": ""}, {"112": ""}, {"113": "9e506be03d48949a6a169008b48b88bc5388fcd8"}], "hash": "5032f3ab8dbb7501785fc56fd58aa0f3", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/main/java/com/example/backend/repo/noop/NoOpUserRepository.java"}