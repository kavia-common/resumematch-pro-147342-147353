{"is_source_file": true, "format": "Java", "description": "This Java class 'SecurityConfig' configures security settings for a Spring-based backend, implementing JWT authentication, password encoding, and request authorization rules.", "external_files": ["com.example.backend.security.JwtAuthenticationFilter", "com.example.backend.service.UserService"], "external_methods": ["org.springframework.beans.factory.annotation.Value", "org.springframework.context.annotation.Bean", "org.springframework.context.annotation.Configuration", "org.springframework.security.authentication.AuthenticationManager", "org.springframework.security.authentication.ProviderManager", "org.springframework.security.authentication.dao.DaoAuthenticationProvider", "org.springframework.security.config.Customizer.withDefaults", "org.springframework.security.config.annotation.web.builders.HttpSecurity", "org.springframework.security.config.http.SessionCreationPolicy", "org.springframework.security.core.userdetails.UserDetailsService", "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder", "org.springframework.security.web.SecurityFilterChain", "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"], "published": ["passwordEncoder", "userDetailsService", "authenticationManager", "filterChain", "webSecurityCustomizer"], "classes": [{"name": "SecurityConfig", "description": "Class defining security configuration for JWT-based stateless authentication, request authorization, and Spring Security bean setup."}], "methods": [{"name": "passwordEncoder", "description": "Creates and provides a BCryptPasswordEncoder bean for password hashing."}, {"name": "userDetailsService", "description": "Provides a UserDetailsService implementation, based on the UserService."}, {"name": "authenticationManager", "description": "Constructs an AuthenticationManager with a DaoAuthenticationProvider configured with user details service and password encoder."}, {"name": "filterChain", "description": "Configures the security filter chain with CSRF disabled, CORS enabled, stateless sessions, specific URL access rules, and JWT filter integration."}, {"name": "webSecurityCustomizer", "description": "A placeholder for web security customizer; currently keeps all web security rules intact."}], "calls": ["new BCryptPasswordEncoder()", "userService", "new DaoAuthenticationProvider()", "provider.setUserDetailsService(userDetailsService)", "provider.setPasswordEncoder(encoder)", "new ProviderManager(provider)", "http.csrf(csrf -> csrf.disable())", "Customizer.withDefaults()", "http.sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))", "auth.requestMatchers(...).permitAll()", "http.build()"], "search-terms": ["SecurityConfig", "JwtAuthenticationFilter", "stateless JWT security", "Spring Security configuration", "Request authorization rules", "Password encoder bean"], "state": 2, "file_id": 7, "knowledge_revision": 84, "git_revision": "", "revision_history": [{"18": ""}, {"84": ""}], "hash": "d7677f357968c4a8271f92da062443ed", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/main/java/com/example/backend/config/SecurityConfig.java"}